partner_mouse <- df$Mouse2[1]
if (!any(paste0(first_mouse, "-", partner_mouse) %in% existing_pairs |
paste0(partner_mouse, "-", first_mouse) %in% existing_pairs)) {
result <- result %>%
add_row(Mouse = first_mouse, Partner = partner_mouse, Week = paste0("Week ", week)) %>%
add_row(Mouse = partner_mouse, Partner = first_mouse, Week = paste0("Week ", week))
df <- df %>% filter(!(Mouse1 %in% c(first_mouse, partner_mouse) | Mouse2 %in% c(first_mouse, partner_mouse)))
} else {
df <- df %>% filter(!(Mouse1 == first_mouse & Mouse2 == partner_mouse))
}
}
return(result)
}
# Run the matching for all three weeks
existing_pairs <- c()
all_pairings <- list()
for (week in seq(1, 3)) {
pairings <- find_perfect_matching(all_combinations, existing_pairs, week)
existing_pairs <- c(existing_pairs, paste(pairings$Mouse, pairings$Partner, sep="-"))
all_pairings[[paste0("Week ", week)]] <- pairings
}
# Combine all weeks
pairings <- bind_rows(all_pairings) %>%
pivot_wider(names_from = Week, values_from = Partner) %>%
rename_with(~paste0(.x, " Partner"), -Mouse)
# Display the results
mice_df %>%
right_join(pairings) %>%
relocate(Notes,
.after = everything()) %>%
select(-c(Condition, Notes))
has_devel()
install.packages(c("devtools", "roxygen2"))
install.packages(c("devtools", "roxygen2", "withr"))
library(easypackages)
libraries(c(tidyverse, usethis))
libraries(c("tidyverse", "usethis"))
has_devel()
has_devel()
?has_devel()
library(devtools)
has_devel()
rm(list=ls())
library(easypackages)
libraries(c("tidyverse",
"curl",
"broom"))
install.packages(c("adehabitatHR", "sf", "sp"))
rm(list=ls())
library(easypackages)
libraries(c("tidyverse",
"curl",
"broom",
"adehabitatHR",
"sf",
"sp"))
rm(list=ls())
library(easypackages)
libraries(c("tidyverse",
"curl",
"broom",
"adehabitatHR",
"sf",
"sp",
"patchwork"))
ec <- st_read("ec-provinces.shp")
ec <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/ec-provinces.shp")
ec <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/ec-provinces.shp") %>%
st_read()
ec <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/ec_provinces.shp") %>%
st_read()
rm(list=ls())
library(easypackages)
libraries(c("tidyverse",
"curl",
"broom",
"adehabitatHR",
"sf",
"sp",
"patchwork"))
ec <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/ec_provinces.shp") %>%
st_read()
ec <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/ec_provinces.shp")
View(ec)
rm(list=ls())
library(easypackages)
libraries(c("tidyverse",
"curl",
"broom",
"adehabitatHR",
"sf",
"sp",
"patchwork"))
ec <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/ec_provinces.shp")
d <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/spider_monkeys.csv") %>%
read_csv()
# project and plot focal points
crs_original <- "+proj=longlat +datum=WGS84"
coordinates(d) <- c("Longitude", "Latitude")  # x, y values represent the longitude and latitude, respectively and match the names of the fields in our original data table
proj4string(d) <- CRS(crs_original)  #note that the data need to have an initial projection assigned in order to be transformed; here we know that our initial coordinates are in latitude-longitude
crs_target <- "+proj=utm +zone=18 + south +datum=WGS84 +units=m"
d_sp <- spTransform(d, CRS(crs_target))
d_sf <- st_as_sf(d_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
plot(d_sp, pch = 19, main = "Focal Points")
st_as_sf(d_sp, CRS(crs_target))
crs_original <- "+proj=longlat +datum=WGS84"
coordinates(d) <- c("Longitude", "Latitude")  # x, y values represent the longitude and latitude, respectively and match the names of the fields in our original data table
crs_original <- "+proj=longlat +datum=WGS84"
coordinates(d) <- c("Longitude", "Latitude")  # x, y values represent the longitude and latitude, respectively and match the names of the fields in our original data table
rm(list=ls())
library(easypackages)
libraries(c("tidyverse",
"curl",
"broom",
"adehabitatHR",
"sf",
"sp",
"patchwork"))
ec <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/ec_provinces.shp")
d <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/spider_monkeys.csv") %>%
read_csv()
# project and plot focal points
crs_original <- "+proj=longlat +datum=WGS84"
coordinates(d) <- c("Longitude", "Latitude")  # x, y values represent the longitude and latitude, respectively and match the names of the fields in our original data table
proj4string(d) <- CRS(crs_original)  #note that the data need to have an initial projection assigned in order to be transformed; here we know that our initial coordinates are in latitude-longitude
crs_target <- "+proj=utm +zone=18 + south +datum=WGS84 +units=m"
d_sp <- spTransform(d, CRS(crs_target))
d_sf <- st_as_sf(d_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
plot(d_sp, pch = 19, main = "Focal Points")
rm(list=ls())
library(easypackages)
libraries(c("tidyverse",
"curl",
"broom",
"adehabitatHR",
"sf",
"sp",
"patchwork"))
ec <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/ec_provinces.shp")
d <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/spider_monkeys.csv") %>%
read_csv()
# project and plot focal points
crs_original <- "+proj=longlat +datum=WGS84"
coordinates(d) <- c("Longitude", "Latitude")  # x, y values represent the longitude and latitude, respectively and match the names of the fields in our original data table
proj4string(d) <- CRS(crs_original)  #note that the data need to have an initial projection assigned in order to be transformed; here we know that our initial coordinates are in latitude-longitude
crs_target <- "+proj=utm +zone=18 + south +datum=WGS84 +units=m"
d_sp <- spTransform(d, CRS(crs_target))
d_sf <- st_as_sf(d_sp, CRS(crs_target))
plot(d_sp, pch = 19, main = "Focal Points")
is.projected(d_sp)
summary(d_sp)
d_sp %>%
select(`Composition`) %>%
str_count("/")
str_count(d_sp$Composition, "/")
d_sp %>%
pull(`Composition`) %>%
str_count("/")
d_sp %>%
as_tibble() %>%
pull(`Composition`) %>%
str_count("/")
d_sp %>%
#as_tibble() %>%
pull(`Composition`)
d_sp@data %>%
#as_tibble() %>%
pull(`Composition`)
d_sp@data %>%
#as_tibble() %>%
pull(`Composition`) %>%
str_count("/")
d_sp$Group_Size <- d_sp@data %>%
pull(`Composition`) %>%
str_count("/")
mean(d_sp$Group_Size)
trees <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/trees_2012.csv") %>%
read_csv()
View(trees)
head(trees)
coordinates(trees) <- c("FINAL_LON", "FINAL_LAT")
proj4string(trees) <- CRS("+proj=longlat +datum=WGS84")
trees_sp <- spTransform(trees, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
trees_sf <- st_as_sf(trees_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
plot(trees_sp, pch = 19, main = "Feeding Trees")
station <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/TBS_coordinates.csv") %>%
read_csv()
station_sf <- st_as_sf(station_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
coordinates(station) <- c("Longitude", "Latitude")
proj4string(station) <- CRS("+proj=longlat +datum=WGS84")
station_sp <- spTransform(station, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
station_sf <- st_as_sf(station_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
mineral_lick <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/mineral_lick.csv") %>%
read_csv()
head(mineral_lick)
mineral_lick_sf <- st_as_sf(mineral_lick, coords = c("x_proj", "y_proj"), crs = 32718)
mineral_lick_sp <- as(mineral_lick_sf, "Spatial")
ecudor <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/ec_provinces.shp")
ecuador_sp <- as(ecuador, "Spatial")
ecuador <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/ec_provinces.shp")
ecuador_sp <- as(ecuador, "Spatial")
rm(list=ls())
library(easypackages)
libraries(c("tidyverse",
"curl",
"broom",
"adehabitatHR",
"sf",
"sp",
"patchwork"))
d <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/spider_monkeys.csv") %>%
read_csv()
# project and plot focal points
crs_original <- "+proj=longlat +datum=WGS84"
coordinates(d) <- c("Longitude", "Latitude")  # x, y values represent the longitude and latitude, respectively and match the names of the fields in our original data table
proj4string(d) <- CRS(crs_original)  #note that the data need to have an initial projection assigned in order to be transformed; here we know that our initial coordinates are in latitude-longitude
crs_target <- "+proj=utm +zone=18 + south +datum=WGS84 +units=m"
d_sp <- spTransform(d, CRS(crs_target))
d_sf <- st_as_sf(d_sp, CRS(crs_target))
plot(d_sp, pch = 19, main = "Focal Points")
d_sp$Group_Size <- d_sp@data %>%
pull(`Composition`) %>%
str_count("/")
mean(d_sp$Group_Size)
trees <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/trees_2012.csv") %>%
read_csv()
coordinates(trees) <- c("FINAL_LON", "FINAL_LAT")
proj4string(trees) <- CRS("+proj=longlat +datum=WGS84")
trees_sp <- spTransform(trees, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
trees_sf <- st_as_sf(trees_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
plot(trees_sp, pch = 19, main = "Feeding Trees")
station <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/TBS_coordinates.csv") %>%
read_csv()
coordinates(station) <- c("Longitude", "Latitude")
proj4string(station) <- CRS("+proj=longlat +datum=WGS84")
station_sp <- spTransform(station, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
station_sf <- st_as_sf(station_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
mineral_lick <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/mineral_lick.csv") %>%
read_csv()
head(mineral_lick)
mineral_lick_sf <- st_as_sf(mineral_lick, coords = c("x_proj", "y_proj"), crs = 32718)
mineral_lick_sp <- as(mineral_lick_sf, "Spatial")
ecuador <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/ec_provinces.shp")
ecuador_sp <- as(ecuador, "Spatial")
# Load and project shapefile for the TBS trail system, convert to sp/sf
trails <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/trails.shp")
trails_sp <- as(trails, "Spatial")
proj4string(trails_sp) <- CRS("+proj=longlat +datum=WGS84")
trails_sp <- spTransform(trails_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
trails_sf <- st_as_sf(trails_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
# load and project shapefile for the Tiputini River, convert to sp/sf
rio <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/rio_tiputini.shp")
rio_sp <- as(rio, "Spatial")
proj4string(rio_sp) <- CRS("+proj=longlat +datum=WGS84")
rio_sp <- spTransform(rio_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
rio_sf <- st_as_sf(rio_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
p1 <- ggplot() + geom_sf(data = ecuador_sf) + geom_sf(data = rio_sf, color = "blue") +
geom_sf(data = station_sf, color = "red") + xlab("Longitude") + ylab("Latitude") +
ggtitle("TBS, Ecuador") + coord_sf(crs = 32718)
p1 + p2
p1 <- ggplot() + geom_sf(data = ecuador_sf) + geom_sf(data = rio_sf, color = "blue") +
geom_sf(data = station_sf, color = "red") + xlab("Longitude") + ylab("Latitude") +
ggtitle("TBS, Ecuador") + coord_sf(crs = 32718)
patch <- p1 + p2
p1 <- ggplot() + geom_sf(data = ecuador_sf) + geom_sf(data = rio_sf, color = "blue") +
geom_sf(data = station_sf, color = "red") + xlab("Longitude") + ylab("Latitude") +
ggtitle("TBS, Ecuador") + coord_sf(crs = 32718)
rm(list=ls())
library(easypackages)
libraries(c("tidyverse",
"curl",
"broom",
"adehabitatHR",
"sf",
"sp",
"patchwork"))
d <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/spider_monkeys.csv") %>%
read_csv()
# project and plot focal points
crs_original <- "+proj=longlat +datum=WGS84"
coordinates(d) <- c("Longitude", "Latitude")  # x, y values represent the longitude and latitude, respectively and match the names of the fields in our original data table
proj4string(d) <- CRS(crs_original)  #note that the data need to have an initial projection assigned in order to be transformed; here we know that our initial coordinates are in latitude-longitude
crs_target <- "+proj=utm +zone=18 + south +datum=WGS84 +units=m"
d_sp <- spTransform(d, CRS(crs_target))
d_sf <- st_as_sf(d_sp, CRS(crs_target))
plot(d_sp, pch = 19, main = "Focal Points")
d_sp$Group_Size <- d_sp@data %>%
pull(`Composition`) %>%
str_count("/")
mean(d_sp$Group_Size)
trees <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/trees_2012.csv") %>%
read_csv()
coordinates(trees) <- c("FINAL_LON", "FINAL_LAT")
proj4string(trees) <- CRS("+proj=longlat +datum=WGS84")
trees_sp <- spTransform(trees, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
trees_sf <- st_as_sf(trees_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
plot(trees_sp, pch = 19, main = "Feeding Trees")
station <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/TBS_coordinates.csv") %>%
read_csv()
coordinates(station) <- c("Longitude", "Latitude")
proj4string(station) <- CRS("+proj=longlat +datum=WGS84")
station_sp <- spTransform(station, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
station_sf <- st_as_sf(station_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
mineral_lick <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/mineral_lick.csv") %>%
read_csv()
head(mineral_lick)
mineral_lick_sf <- st_as_sf(mineral_lick, coords = c("x_proj", "y_proj"), crs = 32718)
mineral_lick_sp <- as(mineral_lick_sf, "Spatial")
ecuador <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/ec_provinces.shp")
proj4string(ecuador_sp) <- CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m")
rm(list=ls())
library(easypackages)
libraries(c("tidyverse",
"curl",
"broom",
"adehabitatHR",
"sf",
"sp",
"patchwork"))
d <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/spider_monkeys.csv") %>%
read_csv()
# project and plot focal points
crs_original <- "+proj=longlat +datum=WGS84"
coordinates(d) <- c("Longitude", "Latitude")  # x, y values represent the longitude and latitude, respectively and match the names of the fields in our original data table
proj4string(d) <- CRS(crs_original)  #note that the data need to have an initial projection assigned in order to be transformed; here we know that our initial coordinates are in latitude-longitude
crs_target <- "+proj=utm +zone=18 + south +datum=WGS84 +units=m"
d_sp <- spTransform(d, CRS(crs_target))
d_sf <- st_as_sf(d_sp, CRS(crs_target))
plot(d_sp, pch = 19, main = "Focal Points")
d_sp$Group_Size <- d_sp@data %>%
pull(`Composition`) %>%
str_count("/")
mean(d_sp$Group_Size)
trees <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/trees_2012.csv") %>%
read_csv()
coordinates(trees) <- c("FINAL_LON", "FINAL_LAT")
proj4string(trees) <- CRS("+proj=longlat +datum=WGS84")
trees_sp <- spTransform(trees, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
trees_sf <- st_as_sf(trees_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
plot(trees_sp, pch = 19, main = "Feeding Trees")
station <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/TBS_coordinates.csv") %>%
read_csv()
coordinates(station) <- c("Longitude", "Latitude")
proj4string(station) <- CRS("+proj=longlat +datum=WGS84")
station_sp <- spTransform(station, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
station_sf <- st_as_sf(station_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
mineral_lick <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/mineral_lick.csv") %>%
read_csv()
head(mineral_lick)
mineral_lick_sf <- st_as_sf(mineral_lick, coords = c("x_proj", "y_proj"), crs = 32718)
mineral_lick_sp <- as(mineral_lick_sf, "Spatial")
ecuador <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/ec_provinces.shp")
proj4string(ecuador_sp) <- CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m")
rm(list=ls())
library(easypackages)
libraries(c("tidyverse",
"curl",
"broom",
"adehabitatHR",
"sf",
"sp",
"patchwork"))
d <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/spider_monkeys.csv") %>%
read_csv()
# project and plot focal points
crs_original <- "+proj=longlat +datum=WGS84"
coordinates(d) <- c("Longitude", "Latitude")  # x, y values represent the longitude and latitude, respectively and match the names of the fields in our original data table
proj4string(d) <- CRS(crs_original)  #note that the data need to have an initial projection assigned in order to be transformed; here we know that our initial coordinates are in latitude-longitude
crs_target <- "+proj=utm +zone=18 + south +datum=WGS84 +units=m"
d_sp <- spTransform(d, CRS(crs_target))
d_sf <- st_as_sf(d_sp, CRS(crs_target))
plot(d_sp, pch = 19, main = "Focal Points")
d_sp$Group_Size <- d_sp@data %>%
pull(`Composition`) %>%
str_count("/")
mean(d_sp$Group_Size)
trees <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/trees_2012.csv") %>%
read_csv()
coordinates(trees) <- c("FINAL_LON", "FINAL_LAT")
proj4string(trees) <- CRS("+proj=longlat +datum=WGS84")
trees_sp <- spTransform(trees, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
trees_sf <- st_as_sf(trees_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
plot(trees_sp, pch = 19, main = "Feeding Trees")
station <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/TBS_coordinates.csv") %>%
read_csv()
coordinates(station) <- c("Longitude", "Latitude")
proj4string(station) <- CRS("+proj=longlat +datum=WGS84")
station_sp <- spTransform(station, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
station_sf <- st_as_sf(station_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
mineral_lick <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/mineral_lick.csv") %>%
read_csv()
head(mineral_lick)
mineral_lick_sf <- st_as_sf(mineral_lick, coords = c("x_proj", "y_proj"), crs = 32718)
mineral_lick_sp <- as(mineral_lick_sf, "Spatial")
ecuador <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/ec_provinces.shp")
ecuador_sp <- as(ecuador, "Spatial")
proj4string(ecuador_sp) <- CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m")
ecuador_sf <- st_as_sf(ecuador_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
# Load and project shapefile for the TBS trail system, convert to sp/sf
trails <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/trails.shp")
trails_sp <- as(trails, "Spatial")
proj4string(trails_sp) <- CRS("+proj=longlat +datum=WGS84")
trails_sp <- spTransform(trails_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
trails_sf <- st_as_sf(trails_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
# load and project shapefile for the Tiputini River, convert to sp/sf
rio <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/rio_tiputini.shp")
rio_sp <- as(rio, "Spatial")
proj4string(rio_sp) <- CRS("+proj=longlat +datum=WGS84")
rio_sp <- spTransform(rio_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
rio_sf <- st_as_sf(rio_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
p1 <- ggplot() + geom_sf(data = ecuador_sf) + geom_sf(data = rio_sf, color = "blue") +
geom_sf(data = station_sf, color = "red") + xlab("Longitude") + ylab("Latitude") +
ggtitle("TBS, Ecuador") + coord_sf(crs = 32718)
p2 <- ggplot() + geom_sf(data = trails_sf) + geom_sf(data = rio_sf, color = "blue") +
geom_sf(data = station_sf, color = "red") + xlab("Longitude") + ylab("Latitude") +
ggtitle("TBS trail system \n and Tiputini river") + coord_sf(crs = 32718)
patch <- p1 + p2
p1 + p2
p3 <- ggplot() + geom_sf(data = trails_sf) + geom_sf(data = rio_sf, color = "blue") +
geom_sf(data = d_sf, color = "red") + xlab("Longitude") + ylab("Latitude") +
ggtitle("Focal points with trail system \n and Tiputini river") + coord_sf(crs = 32718)
p3
polygon <- mcp(d_sp, percent = 100)
rm(list=ls())
library(easypackages)
libraries(c("tidyverse",
"curl",
"broom",
"adehabitatHR",
"sf",
"sp",
"patchwork"))
d <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/spider_monkeys.csv") %>%
read_csv()
# project and plot focal points
crs_original <- "+proj=longlat +datum=WGS84"
coordinates(d) <- c("Longitude", "Latitude")  # x, y values represent the longitude and latitude, respectively and match the names of the fields in our original data table
proj4string(d) <- CRS(crs_original)  #note that the data need to have an initial projection assigned in order to be transformed; here we know that our initial coordinates are in latitude-longitude
crs_target <- "+proj=utm +zone=18 + south +datum=WGS84 +units=m"
d_sp <- spTransform(d, CRS(crs_target))
d_sf <- st_as_sf(d_sp, CRS(crs_target))
plot(d_sp, pch = 19, main = "Focal Points")
d_sp$Group_Size <- d_sp@data %>%
pull(`Composition`) %>%
str_count("/")
mean(d_sp$Group_Size)
trees <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/trees_2012.csv") %>%
read_csv()
coordinates(trees) <- c("FINAL_LON", "FINAL_LAT")
proj4string(trees) <- CRS("+proj=longlat +datum=WGS84")
trees_sp <- spTransform(trees, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
trees_sf <- st_as_sf(trees_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
plot(trees_sp, pch = 19, main = "Feeding Trees")
station <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/TBS_coordinates.csv") %>%
read_csv()
coordinates(station) <- c("Longitude", "Latitude")
proj4string(station) <- CRS("+proj=longlat +datum=WGS84")
station_sp <- spTransform(station, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
station_sf <- st_as_sf(station_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
mineral_lick <- curl("https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/mineral_lick.csv") %>%
read_csv()
head(mineral_lick)
mineral_lick_sf <- st_as_sf(mineral_lick, coords = c("x_proj", "y_proj"), crs = 32718)
mineral_lick_sp <- as(mineral_lick_sf, "Spatial")
ecuador <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/ec_provinces.shp")
ecuador_sp <- as(ecuador, "Spatial")
proj4string(ecuador_sp) <- CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m")
ecuador_sf <- st_as_sf(ecuador_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
# Load and project shapefile for the TBS trail system, convert to sp/sf
trails <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/trails.shp")
trails_sp <- as(trails, "Spatial")
proj4string(trails_sp) <- CRS("+proj=longlat +datum=WGS84")
trails_sp <- spTransform(trails_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
trails_sf <- st_as_sf(trails_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
# load and project shapefile for the Tiputini River, convert to sp/sf
rio <- st_read("/Users/danielsanmiguel/Desktop/Grad School/Spring 2024/Applied Data Analysis/Datasets/rio_tiputini.shp")
rio_sp <- as(rio, "Spatial")
proj4string(rio_sp) <- CRS("+proj=longlat +datum=WGS84")
rio_sp <- spTransform(rio_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
rio_sf <- st_as_sf(rio_sp, CRS("+proj=utm +zone=18 + south +datum=WGS84 +units=m"))
p1 <- ggplot() + geom_sf(data = ecuador_sf) + geom_sf(data = rio_sf, color = "blue") +
geom_sf(data = station_sf, color = "red") + xlab("Longitude") + ylab("Latitude") +
ggtitle("TBS, Ecuador") + coord_sf(crs = 32718)
p2 <- ggplot() + geom_sf(data = trails_sf) + geom_sf(data = rio_sf, color = "blue") +
geom_sf(data = station_sf, color = "red") + xlab("Longitude") + ylab("Latitude") +
ggtitle("TBS trail system \n and Tiputini river") + coord_sf(crs = 32718)
p1 + p2
p3 <- ggplot() + geom_sf(data = trails_sf) + geom_sf(data = rio_sf, color = "blue") +
geom_sf(data = d_sf, color = "red") + xlab("Longitude") + ylab("Latitude") +
ggtitle("Focal points with trail system \n and Tiputini river") + coord_sf(crs = 32718)
p3
polygon <- mcp(d_sp, percent = 100)
plot(polygon, main = "Home Range, MCP method, 100%")
p1 + \
p2
(p1 + \
p2)
(p1 + /
(p1 \
(p1 \ +
p1 /
p2
p1 +
p2
devtools::build_vignettes()
getwd()
setwd("~/Desktop/Grad School/Spring 2024/Applied Data Analysis/Repositories/Final_Project/")
devtools::build_vignettes()
devtools::build()
devtools::build()
devtools::build_vignettes()
devtools::build()
